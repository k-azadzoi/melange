{"version":3,"sources":["components/Planets.js","components/Search.js","components/PlanetSearch.js","components/Planet.js","index.js"],"names":["PLANETS","gql","withStyles","theme","root","flexGrow","display","flexWrap","overflow","backgroundColor","palette","background","paper","gridList","width","paddingTop","paddingBottom","title","color","fontSize","planetGrid","subtitle","icon","newPlanets","classes","useQuery","loading","error","data","planets","map","id","name","imageUrl","inhabitants","key","className","to","Container","maxWidth","Grid","container","spacing","item","xs","sm","md","GridList","cellHeight","cols","GridListTile","src","alt","GridListTileBar","menuButton","marginRight","appBar","button","paddingLeft","breakpoints","up","search","inputRoot","toolbar","mixins","inputInput","transition","transitions","create","searchValue","onChange","onSearch","onKeyPress","AppBar","Toolbar","Typography","variant","noWrap","style","textDecoration","InputBase","placeholder","input","inputProps","value","Button","type","onClick","SEARCH","PlanetSearch","useState","setSearchValue","useLazyQuery","e","target","variables","match","ev","preventDefault","PLANET","ADD_REVIEW","planetInfo","textAlign","planetText","params","useSubscription","newReview","setNewReview","useMutation","addReview","planets_by_pk","reviews","data-netlify","onSubmit","body","then","catch","message","TextField","label","Divider","List","review","ListItem","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","App","exact","path","component","Planet","render","document","getElementById"],"mappings":"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","file":"static/js/main.0067cfb7.chunk.js","sourcesContent":["import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Link } from 'react-router-dom'\nimport Container from '@material-ui/core/Container';\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,  \n  },\n  gridList: {\n    width: 400,\n    paddingTop: 10,\n    paddingBottom: 5,\n  },\n  title: {\n      color: '#ED8936',\n      fontSize: '24px'\n  },\n  planetGrid: {\n      \n  },\n  subtitle: {\n      fontSize: '16px',\n      paddingTop: '5px'\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n \n});\n\nconst PLANETS = gql`\n    {\n        planets(order_by: {name: asc}) {\n            name\n            inhabitants\n            id\n            imageUrl\n        }\n    }\n\n`\n\nconst Planets = ({ newPlanets, classes }) => {\n    const { loading, error, data } = useQuery(PLANETS)\n\n    const renderPlanets = (planets) => {\n        return planets.map(({ id, name, imageUrl, inhabitants }) => (\n            <div key={id} className={classes.root}>  \n                <Link to={`/planet/${id}`}>\n                    <Container className={classes.planetGrid} maxWidth=\"md\">\n                        <Grid container spacing={4}>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <GridList cellHeight={260} spacing={1} cols={1} className={classes.gridList} >\n                                    <GridListTile>\n                                            <img src={imageUrl} alt={name} />\n                                \n                                        <GridListTileBar \n                                            title={name}\n                                            subtitle={<span> {inhabitants} </span> }\n                                            classes={{\n                                                title: classes.title,\n                                                subtitle: classes.subtitle\n                                            }}\n                                        />\n                                    </GridListTile>  \n                                </GridList>   \n                            </Grid>     \n                        </Grid> \n                    </Container>                       \n                </Link>\n            </div>\n        ))\n    }\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :( </p>\n\n    return <div>{renderPlanets(newPlanets || data.planets)}</div>\n}\n\nexport default withStyles(styles)(Planets)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    appBar:{\n        backgroundColor: '#9C4421',\n        color: '#F7FAFC',\n    },\n    button:{\n        color: '#F7FAFC',\n        paddingTop: '12px',\n    },\n    title: {\n      flexGrow: 1,\n      display: 'none',\n      paddingLeft: '20px',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    search: {\n      \n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    toolbar: theme.mixins.toolbar,\n    inputInput: {\n      paddingLeft: `calc(1em + ${theme.spacing(1)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  });\n\nconst Search = ({ classes, searchValue, onChange, onSearch, onKeyPress }) => {\n    return (\n        <div className={classes.root}>\n            <div className={classes.toolbar} />\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                <Typography className={classes.title} variant=\"h6\" noWrap>\n                    <Link style={{color: 'inherit', textDecoration: 'inherit'}}to='/'> Melange </Link>\n                </Typography>\n                <div className={classes.search} >\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            value={searchValue}\n                            onChange={onChange}\n                            onKeyPress={onKeyPress}\n                        />\n                        <Button className={classes.button} type='submit' onClick={onSearch}>Search</Button>\n                 </div>\n                </Toolbar>\n            </AppBar>     \n        </div>\n    )\n}\n\nexport default withStyles(styles)(Search)","import React, { useState } from 'react'\nimport Planets from './Planets'\nimport Search from './Search'\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nconst SEARCH = gql`\nquery Search($match: String) {\n    planets(order_by: { name: asc }, where: { name: { _ilike: $match }}) {\n      name\n      imageUrl\n      inhabitants\n      id\n    }\n  }\n`\n\nconst PlanetSearch = () => {\n\n    const [searchValue, setSearchValue] = useState('') \n    const [search, { loading, error, data }] = useLazyQuery(SEARCH)\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :( </p>\n    return(\n        <div>\n            <Search \n                searchValue={searchValue}\n                onChange={(e) => setSearchValue(e.target.value)}\n                onSearch={() => search({ variables: { match: `%${searchValue}%` } })}\n                onKeyPress={(ev) => {\n                    if (ev.key === 'Enter'){\n                        search({ variables: { match: `%${searchValue}%`}})\n                        ev.preventDefault()\n                    }\n                }}\n            />\n            <Planets \n                newPlanets={data ? data.planets : null}\n            />\n        </div>\n    )\n}\n\nexport default PlanetSearch","import React, { useState } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useSubscription, useMutation } from '@apollo/react-hooks'\nimport { withStyles } from '@material-ui/core/styles'\nimport Search from './Search'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Divider from '@material-ui/core/Divider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    planetInfo: {\n        textAlign: 'center',\n    },\n    planetText: {\n        paddingTop: '20px',\n    },\n});\n\nconst PLANET = gql`\n    subscription Planet($id: uuid!){\n        planets_by_pk(id: $id) {\n            id\n            imageUrl\n            inhabitants\n            name\n            reviews(order_by: { created_at: desc }) {\n                id\n                body\n            }\n        }\n    }\n`\n\nconst ADD_REVIEW = gql`\n    mutation($body: String!, $id: uuid!) {\n        AddReview(body: $body, id: $id) {\n            affected_rows\n        }\n    }\n`\n\nconst Planet = ({\n    match: {\n        params: { id }\n    },\n    classes\n}) => {\n    const { loading, error, data } = useSubscription(PLANET, { variables: { id } })\n\n    const [newReview, setNewReview] = useState('')   \n    const [addReview] = useMutation(ADD_REVIEW)\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :(</p>\n\n    const { name, imageUrl, inhabitants, reviews } = data.planets_by_pk\n\n    return(\n        <div className={classes.root}>\n            <Search />\n            <div className={classes.planetInfo}>\n                <Typography variant=\"h3\" className={classes.planetText}>\n                    {name} \n                </Typography>\n                <img src={imageUrl} alt='planets'/>\n            </div>\n                <form type='hidden' name='review' data-netlify='true' onSubmit={() => {\n                                    addReview({ variables: { id, body: newReview } })\n                                        .then(() => setNewReview(''))\n                                        .catch((e) => {\n                                            setNewReview(e.message)\n                                        })\n                                    }}>\n                    <Grid container spacing={3}>\n                        <Grid item md={6} xs={12}>\n                            <TextField\n                                label='Enter a Review'\n                                name='body'\n                                variant='outlined'\n                                value={newReview}\n                                onChange={(e) => setNewReview(e.target.value)}\n                            >\n                            </TextField>\n                        </Grid>\n                    <Button className={classes.button} type='submit'>Submit</Button>\n                    </Grid>\n                </form>\n                <Divider/>\n            <List >\n                {reviews.map((review) => (\n                    <ListItem key={review.id}> {review.body}</ListItem>\n                ))}\n            </List>\n           \n        </div>\n    )\n}\n\nexport default withStyles(styles)(Planet)","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport PlanetSearch from './components/PlanetSearch'\nimport Planet from './components/Planet'\nimport './index.css'\n\nconst GRAPHQL_ENDPOINT = 'review-hasura.herokuapp.com/v1/graphql'\n\nconst httpLink = new HttpLink({\n  uri: `https://${GRAPHQL_ENDPOINT}`,\n})\n\n//deploy to netlify didn't work, but added an s to ws in the uri link and it worked\nconst wsLink = new WebSocketLink({\n  uri: `wss://${GRAPHQL_ENDPOINT}`,\n  options: {\n    reconnect: true,\n  }\n})\n\n//for telling our app to use a 1) websocket link for subscriptions and 2) httpLink for queries and mutations\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink, // 1) subscriptions\n  httpLink // 2) queries and mutations\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\n\nconst App = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Switch>\n        <Route exact path='/planet/:id' component={Planet}/>\n        <Route path='/' component={PlanetSearch}/>\n      </Switch>\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}